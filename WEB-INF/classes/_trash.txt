Testing GIT
		
		//seeColony(this.getColony());
		//System.out.println("ant life : " + this.toString());
		//look();
		//world.action_fifo.add(new DrawObject(id, move, "linearVelocity"));		
		//myBody.m_linearVelocity = move.getVec2();//applyImpulse(move.getVec2(), myBody.getPosition());
		//Position move_pos = new Position(pos._map, 280.0f, 140.0f);
		
		/*
		//find new position
		float acc = 20 * adn.getCurrent("acceleration");
		float x_acc = (float)(Math.random() * acc);
		float y_acc = (float)(Math.random() * acc);
		if (y_acc % 2 == 0) y_acc = -y_acc;
		//float acc_dif = x_acc - y_acc;
		//direction = myBody.getAngle();
		//Position move_pos = new Position(pos._map, x_acc, y_acc);
		
		Vec2 dest = this.colony.getMyBody().getPosition();
		Vec2 me = this.getMyBody().getPosition();
		
		Vec2 apply_force = dest.sub(me);
		//System.out.println("apply force : " + apply_force.toString());
		
		//myBody.m_force = new Vec2(0, 0);
		//myBody.m_torque = 0.0f;
		//myBody.m_torque = new Vec2(0, 0);
		
		myBody.m_linearVelocity = apply_force;
		
		Vec2 x1 = new Vec2();
		Vec2 x2 = new Vec2();
		float distance = Distance.distance(x1, x2, this.getMyBody().getShapeList(), this.getMyBody().getXForm(), colony.getMyBody().getShapeList(), colony.getMyBody().getXForm());
		//System.out.println("move to = " + move_pos.toString());
		//System.out.println("distance= " + distance + ", x1:" + x1.toString() + ", x2:" + x2.toString());
		System.out.println("linearvelocity: " + myBody.m_linearVelocity.toString());
		//myBody.m_linearVelocity = myBody.m_linearVelocity.mul(distance);	
		
		
		Position move_pos = new Position(pos._map, apply_force.x * distance, apply_force.y * distance);
		
		
		// keep it in world anyway
			
		// move to new position
		//MoveTo(move_pos);		
		KeepItInWorld();	
		//world.log.debug("linear velocity [" + id + "] : " + myBody.getLinearVelocity().x + "," + myBody.getLinearVelocity().y);
		//world.log.debug("body position : id : [" + id + "] : " + myBody.getPosition().x + "," + myBody.getPosition().y);
		*/
		//myBody.getLinearVelocity().

		//limit_speed_max();
		
//		world.log.debug(id + "; acc_dif ; " + acc_dif + "; " + myBody.getAngle() + "; " + myBody.getAngularVelocity());
		//myBody.m_linearVelocity = move_pos.getVec2();
		//world.log.debug(id + " size : " + adn.getCurrent("size") );
		//world.log.debug(id + " linear velocity : " + myBody.m_linearVelocity.x + "," + myBody.m_linearVelocity.y);

//		world.log.debug(id + " troque:" + myBody.m_torque);	
//		world.log.debug(id + " invI:" + myBody.m_invI);
//		world.log.debug(id + " m_linearDamping:" + myBody.m_linearDamping);
//		world.log.debug(id + " intertia:" + myBody);

		
		//myBody.
		
		/*		
		try
		{
			Object dynamics_o =  world.woal.so.getAttribute("dynamics");		
			HashMap<Integer, DrawObject> dynamics = (HashMap<Integer, DrawObject>) dynamics_o;
			if (dynamics != null)
			{
				dynamics.put(id, getDrawObject());		
				world.woal.so.setAttribute("dynamics", dynamics);
			}
			else
			{
				world.log.debug("dynamics is null");				
			}
					
		}
		catch (Exception e)
		{
			e.printStackTrace();

		}
		*/
		//move(move_pos);
		
		/*
		if (pos.getX() > 800)
		{
			pos.setX(200);
		}
		//pos.setX(pos.getX() + 1);
		*/
		
		
		
MISSION

		/*
if (other.equals(ant.getColony()))
{
	collisionWithColony();				
	ant.releaseMandible();
	return other;
}
*/
/*
if (other.type.equals("ant"))
{
	Ant a = (Ant)other;
	if (a.currentMission != null)
	{
		if (a.currentMission.target == null)
		{
			a.currentMission.target = ant.currentMission.target;
			a.currentMission.state = 1;
			//System.out.println("collision with dude : " + a.toString() + ", new target set");
		}				
	}
	return other;
}
*/


/*
if (ant.seeColony(ant.getColony()))
{
	
	// eat the food
	//ant.eatFood(other);
	
	//release mandible
	//ant.releaseMandible();					
}
else
{
	if (ant.mandible != null)
	{
		// go home with object on mandible
		//state = 2;
	}
	//
}
*/

/*
// if there is no more food
if (other.adn.isEmpty("storage_food"))
{
	endMission();
}
*/
		
		
		
		/*					
					if (currentPheromone != targetTrack.targetPheromone)
					{
					}
					else
					{ // it's the first pheromone						
						if (ant.getDistance(target) > 100)
						{			
							System.out.println("set new pheromone is first");
							currentPheromone = targetTrack.setNewPheromone(ant.getPos());					
						}
						else
						{
							//ant.MoveToWOAObject(ant.getColony());
						}
						
					}
					*/
					
									case 11 : // go to the food
					//System.out.println("ant leaving : " + ant.adn.toString("storage_food"));
					// move to target
					if (ant.MoveToWOAObject(target) == null)
					{
						//target = ant.getColony();					
						System.out.println("no more target on this mission, go home");
						endMission();
						//target = null;
						//state = 3;
						//currentPheromone = firstPheromone;
						
					}	
					else
					{// target still exists

						//System.out.println("moving to target : " + target.toString());
												
						// if ant has catch something
						if (ant.mandible != null)
						{
							// what the ant has catch ?
							WOAObject food = (WOAObject)ant.mandible.m_body2.getUserData();
							// eat some
							ant.eatFood(food);
							//System.out.println("ant ate: " + ant.adn.toString("storage_food"));
							
						}
						if (target.adn.isEmpty("storage_food"))
						{
							//System.out.println("no more target on this mission ! ");
							endMission();
							//target = null;
							//state = 2;
						}												
						// if ant has no more room
						if (ant.adn.hasMax("storage_food"))
						{						
							//currentPheromone = firstPheromone;
							state = 3;

							ant.releaseMandible();
						}
						if (target == null)
						{
							rememberdTargetFood = 0;
						}
						else
						{
							rememberdTargetFood = target.adn.getCurrent("storage_food");
						}												
					}
					// no more food place for storing
/*
					if (ant.adn.hasMax("storage_food"))
					{
						//target = ant.getColony();
						// go back home
						state = 2;
						//if ()
					}
*/
					//else
					{
						//System.out.println("ant stomac still have place : " + ant.adn.toString("storage_food"));
					}
				break;
				case 12 : //go back home
					ant.MoveToWOAObject(ant.getColony());
					// ant has something in the mandible
					if (ant.mandible != null)
					{
						// the target is still here
						if (target != null)
						{							
							WOAObject food = (WOAObject)ant.mandible.m_body2.getUserData();
							//ant.eatFood(food);
							
							Vec2 j = food.myBody.getPosition().sub(ant.myBody.getPosition());
							Float angle_r = j.calculateAngle();
							//System.out.println("angle : " + angle_r);
							ant.setBodyAngle(angle_r);
							
							if (ant.seeColony(ant.getColony()))
							{ // if see the colony while having something in the mandible, release it
								ant.releaseMandible();
							}
							else
							{ 
								if (carry_tentative > 10)
								{
									//System.out.println("food velocity length: " + food.myBody.m_linearVelocity.length());
									if (food.myBody.m_linearVelocity.length() < 0.005)
									{										
										ant.releaseMandible();
										carry_tentative = 0;
									}
								}
								carry_tentative++;
							}
						}
						else
						{ // if no more target end mission
							endMission();
						}
					}
					else
					{
						//System.out.println("mandible is null");
					}
					if (target != null)
					{
						if (ant.mandible != null) break;
						//if (piste_completed == false)
						{
							//System.out.println("colony distance : " + ant.getDistance(ant.getColony()));
							if (ant.getDistance(ant.getColony()) > 30)
							{								
								if (ant.lifestep % 45 == 0)
								{
									//Pheromone p = new Pheromone(ant.world, ant.getPos());
									if (targetTrack != null)
									{
										targetTrack.setNewPheromone(ant.pos, target_id, rememberdTargetFood);	
									}
									
									//p.mission = this;
									/*
									p.motivation.put(target.id, rememberdTargetFood);
									//p.lastPheromone = lastPheromone;
									
									if (currentPheromone != null)
									{	// set the home pheromone of last pheromone
										currentPheromone.homePheromone = p;
									}
									// set the first pheromone
									if (firstPheromone == null)
									{
										firstPheromone = p;
										//lastPheromone = p;
									}
									homePheromone = p;
									ant.world.addPheromone(p);	
									currentPheromone = p;
									*/									
								}										
							}
					
						}
					}
				break;
				case 13 : // follow pheromones to the home
					
					if (currentPheromone == null)
					{
						// home reached, go to it
						//System.out.println("home reached");
						state = 2;
						break;	
					}
					
					if (ant.getDistance(currentPheromone) < 30)
					{
						// update pheromone motivation list
						
						setMotivation(currentPheromone.mission.target, rememberdTargetFood);
						currentPheromone = currentPheromone.homePheromone;	
					}
					ant.MoveToWOAObject(currentPheromone);
										
				break;
				case 14 : // follow pheromones to the target

					if (currentPheromone == null)
					{ // traget has been reached, last pheromone before it
						//System.out.println("current pheromone is null, go to target directly");
						
						
						
						state = 1;
						break;
						/*
						if (target == null)
						{
							endMission();
							//state = 3;
							
						}
						else
						{
							// ho to target
							state = 1;	
						}						
						break;
						*/
					}
					if (ant.getDistance(currentPheromone) < 30)
					{
						currentPheromone = currentPheromone.targetPheromone;
					}
					ant.MoveToWOAObject(currentPheromone);					
				break;	
							
			case 10 : //roaming
					//System.out.println("roaming");
					//ant.roam();
					// search for food
					//target = ant.searchForFood();
					if (target == null)
					{
						endMission();
						//go to the target
						//state = 1;
					}
				break;	